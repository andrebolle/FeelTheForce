package com.purelazy.game;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.math.Vector2;

import java.util.ArrayList;

//import com.badlogic.gdx.math.Matrix4;
//import com.badlogic.gdx.math.Quaternion;
//import com.badlogic.gdx.math.Vector3;

public class Maze01_Maze16 extends Tray {

    // The game objects
    private BallInSpace white;

    Vector2 whiteGoalPos = new Vector2(1.5f-8f, 1.5f-8f);

    private Vector2[] walls = {
            new Vector2(-7, -7), new Vector2(-6, -7),
            new Vector2(-7, -7), new Vector2(-7, -6),
            new Vector2(-6, -7), new Vector2(-6, -6),
            new Vector2(-7, -5), new Vector2(-6, -5),
            new Vector2(-7, -6), new Vector2(-7, -5),
            new Vector2(-7, -5), new Vector2(-6, -5),
            new Vector2(-7, -5), new Vector2(-7, -4),
            new Vector2(-7, -3), new Vector2(-6, -3),
            new Vector2(-7, -4), new Vector2(-7, -3),
            new Vector2(-7, -3), new Vector2(-6, -3),
            new Vector2(-7, -3), new Vector2(-7, -2),
            new Vector2(-7, -2), new Vector2(-7, -1),
            new Vector2(-7, -1), new Vector2(-7, 0),
            new Vector2(-6, -1), new Vector2(-6, 0),
            new Vector2(-7, 0), new Vector2(-7, 1),
            new Vector2(-6, 0), new Vector2(-6, 1),
            new Vector2(-7, 1), new Vector2(-7, 2),
            new Vector2(-6, 1), new Vector2(-6, 2),
            new Vector2(-7, 2), new Vector2(-7, 3),
            new Vector2(-6, 2), new Vector2(-6, 3),
            new Vector2(-7, 3), new Vector2(-7, 4),
            new Vector2(-6, 3), new Vector2(-6, 4),
            new Vector2(-7, 5), new Vector2(-6, 5),
            new Vector2(-7, 4), new Vector2(-7, 5),
            new Vector2(-7, 5), new Vector2(-6, 5),
            new Vector2(-7, 5), new Vector2(-7, 6),
            new Vector2(-7, 6), new Vector2(-7, 7),
            new Vector2(-6, 6), new Vector2(-6, 7),
            new Vector2(-7, 7), new Vector2(-7, 8),
            new Vector2(-6, 7), new Vector2(-6, 8),
            new Vector2(-7, 9), new Vector2(-6, 9),
            new Vector2(-7, 8), new Vector2(-7, 9),
            new Vector2(-6, 8), new Vector2(-6, 9),
            new Vector2(-6, -7), new Vector2(-5, -7),
            new Vector2(-6, -6), new Vector2(-5, -6),
            new Vector2(-6, -7), new Vector2(-6, -6),
            new Vector2(-6, -6), new Vector2(-5, -6),
            new Vector2(-6, -5), new Vector2(-5, -5),
            new Vector2(-6, -5), new Vector2(-5, -5),
            new Vector2(-6, -4), new Vector2(-5, -4),
            new Vector2(-6, -4), new Vector2(-5, -4),
            new Vector2(-5, -4), new Vector2(-5, -3),
            new Vector2(-6, -2), new Vector2(-5, -2),
            new Vector2(-5, -3), new Vector2(-5, -2),
            new Vector2(-6, -2), new Vector2(-5, -2),
            new Vector2(-6, -1), new Vector2(-5, -1),
            new Vector2(-6, -1), new Vector2(-5, -1),
            new Vector2(-6, 0), new Vector2(-5, 0),
            new Vector2(-6, -1), new Vector2(-6, 0),
            new Vector2(-6, 0), new Vector2(-5, 0),
            new Vector2(-6, 0), new Vector2(-6, 1),
            new Vector2(-6, 1), new Vector2(-6, 2),
            new Vector2(-5, 1), new Vector2(-5, 2),
            new Vector2(-6, 2), new Vector2(-6, 3),
            new Vector2(-6, 4), new Vector2(-5, 4),
            new Vector2(-6, 3), new Vector2(-6, 4),
            new Vector2(-6, 4), new Vector2(-5, 4),
            new Vector2(-6, 5), new Vector2(-5, 5),
            new Vector2(-6, 5), new Vector2(-5, 5),
            new Vector2(-6, 6), new Vector2(-5, 6),
            new Vector2(-6, 6), new Vector2(-5, 6),
            new Vector2(-6, 6), new Vector2(-6, 7),
            new Vector2(-6, 7), new Vector2(-6, 8),
            new Vector2(-5, 7), new Vector2(-5, 8),
            new Vector2(-6, 9), new Vector2(-5, 9),
            new Vector2(-6, 8), new Vector2(-6, 9),
            new Vector2(-5, -7), new Vector2(-4, -7),
            new Vector2(-5, -5), new Vector2(-4, -5),
            new Vector2(-4, -6), new Vector2(-4, -5),
            new Vector2(-5, -5), new Vector2(-4, -5),
            new Vector2(-5, -4), new Vector2(-4, -4),
            new Vector2(-4, -5), new Vector2(-4, -4),
            new Vector2(-5, -4), new Vector2(-4, -4),
            new Vector2(-5, -4), new Vector2(-5, -3),
            new Vector2(-5, -3), new Vector2(-5, -2),
            new Vector2(-4, -3), new Vector2(-4, -2),
            new Vector2(-5, -1), new Vector2(-4, -1),
            new Vector2(-4, -2), new Vector2(-4, -1),
            new Vector2(-5, -1), new Vector2(-4, -1),
            new Vector2(-5, 0), new Vector2(-4, 0),
            new Vector2(-5, 0), new Vector2(-4, 0),
            new Vector2(-5, 1), new Vector2(-4, 1),
            new Vector2(-5, 1), new Vector2(-4, 1),
            new Vector2(-5, 1), new Vector2(-5, 2),
            new Vector2(-5, 3), new Vector2(-4, 3),
            new Vector2(-5, 3), new Vector2(-4, 3),
            new Vector2(-5, 4), new Vector2(-4, 4),
            new Vector2(-4, 3), new Vector2(-4, 4),
            new Vector2(-5, 4), new Vector2(-4, 4),
            new Vector2(-5, 5), new Vector2(-4, 5),
            new Vector2(-5, 5), new Vector2(-4, 5),
            new Vector2(-5, 6), new Vector2(-4, 6),
            new Vector2(-5, 6), new Vector2(-4, 6),
            new Vector2(-5, 8), new Vector2(-4, 8),
            new Vector2(-5, 7), new Vector2(-5, 8),
            new Vector2(-4, 7), new Vector2(-4, 8),
            new Vector2(-5, 8), new Vector2(-4, 8),
            new Vector2(-5, 9), new Vector2(-4, 9),
            new Vector2(-4, -7), new Vector2(-3, -7),
            new Vector2(-3, -7), new Vector2(-3, -6),
            new Vector2(-4, -6), new Vector2(-4, -5),
            new Vector2(-3, -6), new Vector2(-3, -5),
            new Vector2(-4, -4), new Vector2(-3, -4),
            new Vector2(-4, -5), new Vector2(-4, -4),
            new Vector2(-4, -4), new Vector2(-3, -4),
            new Vector2(-4, -3), new Vector2(-3, -3),
            new Vector2(-4, -3), new Vector2(-3, -3),
            new Vector2(-4, -3), new Vector2(-4, -2),
            new Vector2(-3, -3), new Vector2(-3, -2),
            new Vector2(-4, -2), new Vector2(-4, -1),
            new Vector2(-3, -1), new Vector2(-3, 0),
            new Vector2(-4, 1), new Vector2(-3, 1),
            new Vector2(-3, 0), new Vector2(-3, 1),
            new Vector2(-4, 1), new Vector2(-3, 1),
            new Vector2(-4, 2), new Vector2(-3, 2),
            new Vector2(-4, 2), new Vector2(-3, 2),
            new Vector2(-4, 3), new Vector2(-3, 3),
            new Vector2(-3, 2), new Vector2(-3, 3),
            new Vector2(-4, 3), new Vector2(-3, 3),
            new Vector2(-4, 3), new Vector2(-4, 4),
            new Vector2(-4, 5), new Vector2(-3, 5),
            new Vector2(-3, 4), new Vector2(-3, 5),
            new Vector2(-4, 5), new Vector2(-3, 5),
            new Vector2(-3, 5), new Vector2(-3, 6),
            new Vector2(-4, 7), new Vector2(-3, 7),
            new Vector2(-3, 6), new Vector2(-3, 7),
            new Vector2(-4, 7), new Vector2(-3, 7),
            new Vector2(-4, 7), new Vector2(-4, 8),
            new Vector2(-4, 9), new Vector2(-3, 9),
            new Vector2(-3, -7), new Vector2(-2, -7),
            new Vector2(-3, -7), new Vector2(-3, -6),
            new Vector2(-3, -5), new Vector2(-2, -5),
            new Vector2(-3, -6), new Vector2(-3, -5),
            new Vector2(-2, -6), new Vector2(-2, -5),
            new Vector2(-3, -5), new Vector2(-2, -5),
            new Vector2(-3, -4), new Vector2(-2, -4),
            new Vector2(-3, -4), new Vector2(-2, -4),
            new Vector2(-3, -2), new Vector2(-2, -2),
            new Vector2(-3, -3), new Vector2(-3, -2),
            new Vector2(-3, -2), new Vector2(-2, -2),
            new Vector2(-3, 0), new Vector2(-2, 0),
            new Vector2(-3, -1), new Vector2(-3, 0),
            new Vector2(-2, -1), new Vector2(-2, 0),
            new Vector2(-3, 0), new Vector2(-2, 0),
            new Vector2(-3, 0), new Vector2(-3, 1),
            new Vector2(-3, 2), new Vector2(-2, 2),
            new Vector2(-3, 2), new Vector2(-2, 2),
            new Vector2(-3, 2), new Vector2(-3, 3),
            new Vector2(-3, 4), new Vector2(-2, 4),
            new Vector2(-2, 3), new Vector2(-2, 4),
            new Vector2(-3, 4), new Vector2(-2, 4),
            new Vector2(-3, 4), new Vector2(-3, 5),
            new Vector2(-3, 5), new Vector2(-3, 6),
            new Vector2(-2, 5), new Vector2(-2, 6),
            new Vector2(-3, 6), new Vector2(-3, 7),
            new Vector2(-2, 6), new Vector2(-2, 7),
            new Vector2(-3, 8), new Vector2(-2, 8),
            new Vector2(-2, 7), new Vector2(-2, 8),
            new Vector2(-3, 8), new Vector2(-2, 8),
            new Vector2(-3, 9), new Vector2(-2, 9),
            new Vector2(-2, -7), new Vector2(-1, -7),
            new Vector2(-2, -6), new Vector2(-2, -5),
            new Vector2(-1, -6), new Vector2(-1, -5),
            new Vector2(-2, -4), new Vector2(-1, -4),
            new Vector2(-1, -5), new Vector2(-1, -4),
            new Vector2(-2, -4), new Vector2(-1, -4),
            new Vector2(-2, -3), new Vector2(-1, -3),
            new Vector2(-2, -3), new Vector2(-1, -3),
            new Vector2(-2, -2), new Vector2(-1, -2),
            new Vector2(-2, -2), new Vector2(-1, -2),
            new Vector2(-2, -1), new Vector2(-1, -1),
            new Vector2(-1, -2), new Vector2(-1, -1),
            new Vector2(-2, -1), new Vector2(-1, -1),
            new Vector2(-2, -1), new Vector2(-2, 0),
            new Vector2(-2, 1), new Vector2(-1, 1),
            new Vector2(-2, 1), new Vector2(-1, 1),
            new Vector2(-2, 2), new Vector2(-1, 2),
            new Vector2(-1, 1), new Vector2(-1, 2),
            new Vector2(-2, 2), new Vector2(-1, 2),
            new Vector2(-2, 3), new Vector2(-1, 3),
            new Vector2(-2, 3), new Vector2(-1, 3),
            new Vector2(-2, 3), new Vector2(-2, 4),
            new Vector2(-2, 5), new Vector2(-1, 5),
            new Vector2(-1, 4), new Vector2(-1, 5),
            new Vector2(-2, 5), new Vector2(-1, 5),
            new Vector2(-2, 6), new Vector2(-1, 6),
            new Vector2(-2, 5), new Vector2(-2, 6),
            new Vector2(-2, 6), new Vector2(-1, 6),
            new Vector2(-2, 6), new Vector2(-2, 7),
            new Vector2(-2, 7), new Vector2(-2, 8),
            new Vector2(-1, 7), new Vector2(-1, 8),
            new Vector2(-2, 9), new Vector2(-1, 9),
            new Vector2(-1, 8), new Vector2(-1, 9),
            new Vector2(-1, -7), new Vector2(0, -7),
            new Vector2(0, -7), new Vector2(0, -6),
            new Vector2(-1, -6), new Vector2(-1, -5),
            new Vector2(0, -6), new Vector2(0, -5),
            new Vector2(-1, -4), new Vector2(0, -4),
            new Vector2(-1, -5), new Vector2(-1, -4),
            new Vector2(-1, -4), new Vector2(0, -4),
            new Vector2(-1, -3), new Vector2(0, -3),
            new Vector2(0, -4), new Vector2(0, -3),
            new Vector2(-1, -3), new Vector2(0, -3),
            new Vector2(0, -3), new Vector2(0, -2),
            new Vector2(-1, -1), new Vector2(0, -1),
            new Vector2(-1, -2), new Vector2(-1, -1),
            new Vector2(-1, -1), new Vector2(0, -1),
            new Vector2(-1, 0), new Vector2(0, 0),
            new Vector2(-1, 0), new Vector2(0, 0),
            new Vector2(-1, 1), new Vector2(0, 1),
            new Vector2(0, 0), new Vector2(0, 1),
            new Vector2(-1, 1), new Vector2(0, 1),
            new Vector2(-1, 1), new Vector2(-1, 2),
            new Vector2(-1, 3), new Vector2(0, 3),
            new Vector2(0, 2), new Vector2(0, 3),
            new Vector2(-1, 3), new Vector2(0, 3),
            new Vector2(-1, 4), new Vector2(0, 4),
            new Vector2(-1, 4), new Vector2(0, 4),
            new Vector2(-1, 4), new Vector2(-1, 5),
            new Vector2(0, 4), new Vector2(0, 5),
            new Vector2(0, 5), new Vector2(0, 6),
            new Vector2(-1, 7), new Vector2(0, 7),
            new Vector2(-1, 7), new Vector2(0, 7),
            new Vector2(-1, 7), new Vector2(-1, 8),
            new Vector2(-1, 9), new Vector2(0, 9),
            new Vector2(-1, 8), new Vector2(-1, 9),
            new Vector2(0, -7), new Vector2(1, -7),
            new Vector2(0, -7), new Vector2(0, -6),
            new Vector2(0, -5), new Vector2(1, -5),
            new Vector2(0, -6), new Vector2(0, -5),
            new Vector2(0, -5), new Vector2(1, -5),
            new Vector2(1, -5), new Vector2(1, -4),
            new Vector2(0, -4), new Vector2(0, -3),
            new Vector2(1, -4), new Vector2(1, -3),
            new Vector2(0, -3), new Vector2(0, -2),
            new Vector2(1, -3), new Vector2(1, -2),
            new Vector2(0, -1), new Vector2(1, -1),
            new Vector2(1, -2), new Vector2(1, -1),
            new Vector2(0, -1), new Vector2(1, -1),
            new Vector2(0, 0), new Vector2(1, 0),
            new Vector2(0, 0), new Vector2(1, 0),
            new Vector2(0, 0), new Vector2(0, 1),
            new Vector2(0, 2), new Vector2(1, 2),
            new Vector2(1, 1), new Vector2(1, 2),
            new Vector2(0, 2), new Vector2(1, 2),
            new Vector2(0, 2), new Vector2(0, 3),
            new Vector2(1, 2), new Vector2(1, 3),
            new Vector2(1, 3), new Vector2(1, 4),
            new Vector2(0, 4), new Vector2(0, 5),
            new Vector2(1, 4), new Vector2(1, 5),
            new Vector2(0, 6), new Vector2(1, 6),
            new Vector2(0, 5), new Vector2(0, 6),
            new Vector2(0, 6), new Vector2(1, 6),
            new Vector2(0, 7), new Vector2(1, 7),
            new Vector2(0, 7), new Vector2(1, 7),
            new Vector2(0, 8), new Vector2(1, 8),
            new Vector2(0, 8), new Vector2(1, 8),
            new Vector2(0, 9), new Vector2(1, 9),
            new Vector2(1, -7), new Vector2(2, -7),
            new Vector2(1, -6), new Vector2(2, -6),
            new Vector2(1, -6), new Vector2(2, -6),
            new Vector2(2, -6), new Vector2(2, -5),
            new Vector2(1, -5), new Vector2(1, -4),
            new Vector2(1, -4), new Vector2(1, -3),
            new Vector2(2, -4), new Vector2(2, -3),
            new Vector2(1, -2), new Vector2(2, -2),
            new Vector2(1, -3), new Vector2(1, -2),
            new Vector2(1, -2), new Vector2(2, -2),
            new Vector2(1, -2), new Vector2(1, -1),
            new Vector2(1, 0), new Vector2(2, 0),
            new Vector2(1, 0), new Vector2(2, 0),
            new Vector2(2, 0), new Vector2(2, 1),
            new Vector2(1, 1), new Vector2(1, 2),
            new Vector2(2, 1), new Vector2(2, 2),
            new Vector2(1, 3), new Vector2(2, 3),
            new Vector2(1, 2), new Vector2(1, 3),
            new Vector2(1, 3), new Vector2(2, 3),
            new Vector2(1, 3), new Vector2(1, 4),
            new Vector2(1, 4), new Vector2(1, 5),
            new Vector2(2, 4), new Vector2(2, 5),
            new Vector2(1, 6), new Vector2(2, 6),
            new Vector2(2, 5), new Vector2(2, 6),
            new Vector2(1, 6), new Vector2(2, 6),
            new Vector2(2, 6), new Vector2(2, 7),
            new Vector2(1, 8), new Vector2(2, 8),
            new Vector2(2, 7), new Vector2(2, 8),
            new Vector2(1, 8), new Vector2(2, 8),
            new Vector2(1, 9), new Vector2(2, 9),
            new Vector2(2, -7), new Vector2(3, -7),
            new Vector2(2, -6), new Vector2(3, -6),
            new Vector2(2, -6), new Vector2(3, -6),
            new Vector2(2, -5), new Vector2(3, -5),
            new Vector2(2, -6), new Vector2(2, -5),
            new Vector2(2, -5), new Vector2(3, -5),
            new Vector2(2, -4), new Vector2(3, -4),
            new Vector2(2, -4), new Vector2(3, -4),
            new Vector2(2, -4), new Vector2(2, -3),
            new Vector2(2, -2), new Vector2(3, -2),
            new Vector2(3, -3), new Vector2(3, -2),
            new Vector2(2, -2), new Vector2(3, -2),
            new Vector2(2, -1), new Vector2(3, -1),
            new Vector2(2, -1), new Vector2(3, -1),
            new Vector2(2, 0), new Vector2(3, 0),
            new Vector2(3, -1), new Vector2(3, 0),
            new Vector2(2, 0), new Vector2(3, 0),
            new Vector2(2, 0), new Vector2(2, 1),
            new Vector2(2, 2), new Vector2(3, 2),
            new Vector2(2, 1), new Vector2(2, 2),
            new Vector2(2, 2), new Vector2(3, 2),
            new Vector2(2, 3), new Vector2(3, 3),
            new Vector2(2, 3), new Vector2(3, 3),
            new Vector2(2, 4), new Vector2(3, 4),
            new Vector2(2, 4), new Vector2(3, 4),
            new Vector2(2, 4), new Vector2(2, 5),
            new Vector2(2, 5), new Vector2(2, 6),
            new Vector2(3, 5), new Vector2(3, 6),
            new Vector2(2, 7), new Vector2(3, 7),
            new Vector2(2, 6), new Vector2(2, 7),
            new Vector2(2, 7), new Vector2(3, 7),
            new Vector2(2, 8), new Vector2(3, 8),
            new Vector2(2, 7), new Vector2(2, 8),
            new Vector2(2, 8), new Vector2(3, 8),
            new Vector2(2, 9), new Vector2(3, 9),
            new Vector2(3, -7), new Vector2(4, -7),
            new Vector2(4, -7), new Vector2(4, -6),
            new Vector2(3, -5), new Vector2(4, -5),
            new Vector2(3, -5), new Vector2(4, -5),
            new Vector2(3, -4), new Vector2(4, -4),
            new Vector2(3, -4), new Vector2(4, -4),
            new Vector2(4, -4), new Vector2(4, -3),
            new Vector2(3, -3), new Vector2(3, -2),
            new Vector2(4, -3), new Vector2(4, -2),
            new Vector2(3, -1), new Vector2(4, -1),
            new Vector2(3, -1), new Vector2(4, -1),
            new Vector2(3, -1), new Vector2(3, 0),
            new Vector2(3, 1), new Vector2(4, 1),
            new Vector2(4, 0), new Vector2(4, 1),
            new Vector2(3, 1), new Vector2(4, 1),
            new Vector2(4, 1), new Vector2(4, 2),
            new Vector2(3, 3), new Vector2(4, 3),
            new Vector2(4, 2), new Vector2(4, 3),
            new Vector2(3, 3), new Vector2(4, 3),
            new Vector2(4, 3), new Vector2(4, 4),
            new Vector2(3, 5), new Vector2(4, 5),
            new Vector2(4, 4), new Vector2(4, 5),
            new Vector2(3, 5), new Vector2(4, 5),
            new Vector2(3, 5), new Vector2(3, 6),
            new Vector2(3, 7), new Vector2(4, 7),
            new Vector2(4, 6), new Vector2(4, 7),
            new Vector2(3, 7), new Vector2(4, 7),
            new Vector2(4, 7), new Vector2(4, 8),
            new Vector2(3, 9), new Vector2(4, 9),
            new Vector2(4, -7), new Vector2(5, -7),
            new Vector2(4, -7), new Vector2(4, -6),
            new Vector2(5, -7), new Vector2(5, -6),
            new Vector2(4, -5), new Vector2(5, -5),
            new Vector2(5, -6), new Vector2(5, -5),
            new Vector2(4, -5), new Vector2(5, -5),
            new Vector2(5, -5), new Vector2(5, -4),
            new Vector2(4, -3), new Vector2(5, -3),
            new Vector2(4, -4), new Vector2(4, -3),
            new Vector2(4, -3), new Vector2(5, -3),
            new Vector2(4, -2), new Vector2(5, -2),
            new Vector2(4, -3), new Vector2(4, -2),
            new Vector2(4, -2), new Vector2(5, -2),
            new Vector2(4, -1), new Vector2(5, -1),
            new Vector2(4, -1), new Vector2(5, -1),
            new Vector2(5, -1), new Vector2(5, 0),
            new Vector2(4, 1), new Vector2(5, 1),
            new Vector2(4, 0), new Vector2(4, 1),
            new Vector2(4, 1), new Vector2(5, 1),
            new Vector2(4, 1), new Vector2(4, 2),
            new Vector2(4, 2), new Vector2(4, 3),
            new Vector2(4, 3), new Vector2(4, 4),
            new Vector2(5, 3), new Vector2(5, 4),
            new Vector2(4, 4), new Vector2(4, 5),
            new Vector2(5, 4), new Vector2(5, 5),
            new Vector2(4, 6), new Vector2(5, 6),
            new Vector2(4, 6), new Vector2(5, 6),
            new Vector2(4, 6), new Vector2(4, 7),
            new Vector2(4, 8), new Vector2(5, 8),
            new Vector2(4, 7), new Vector2(4, 8),
            new Vector2(4, 8), new Vector2(5, 8),
            new Vector2(4, 9), new Vector2(5, 9),
            new Vector2(5, -7), new Vector2(6, -7),
            new Vector2(5, -7), new Vector2(5, -6),
            new Vector2(5, -6), new Vector2(5, -5),
            new Vector2(6, -6), new Vector2(6, -5),
            new Vector2(5, -5), new Vector2(5, -4),
            new Vector2(6, -5), new Vector2(6, -4),
            new Vector2(5, -3), new Vector2(6, -3),
            new Vector2(6, -4), new Vector2(6, -3),
            new Vector2(5, -3), new Vector2(6, -3),
            new Vector2(5, -2), new Vector2(6, -2),
            new Vector2(5, -2), new Vector2(6, -2),
            new Vector2(6, -2), new Vector2(6, -1),
            new Vector2(5, 0), new Vector2(6, 0),
            new Vector2(5, -1), new Vector2(5, 0),
            new Vector2(5, 0), new Vector2(6, 0),
            new Vector2(5, 1), new Vector2(6, 1),
            new Vector2(5, 1), new Vector2(6, 1),
            new Vector2(5, 2), new Vector2(6, 2),
            new Vector2(6, 1), new Vector2(6, 2),
            new Vector2(5, 2), new Vector2(6, 2),
            new Vector2(5, 4), new Vector2(6, 4),
            new Vector2(5, 3), new Vector2(5, 4),
            new Vector2(5, 4), new Vector2(6, 4),
            new Vector2(5, 4), new Vector2(5, 5),
            new Vector2(6, 4), new Vector2(6, 5),
            new Vector2(5, 6), new Vector2(6, 6),
            new Vector2(6, 5), new Vector2(6, 6),
            new Vector2(5, 6), new Vector2(6, 6),
            new Vector2(5, 7), new Vector2(6, 7),
            new Vector2(5, 7), new Vector2(6, 7),
            new Vector2(5, 8), new Vector2(6, 8),
            new Vector2(5, 8), new Vector2(6, 8),
            new Vector2(5, 9), new Vector2(6, 9),
            new Vector2(6, 8), new Vector2(6, 9),
            new Vector2(6, -7), new Vector2(7, -7),
            new Vector2(7, -7), new Vector2(7, -6),
            new Vector2(6, -5), new Vector2(7, -5),
            new Vector2(6, -6), new Vector2(6, -5),
            new Vector2(6, -5), new Vector2(7, -5),
            new Vector2(6, -5), new Vector2(6, -4),
            new Vector2(6, -4), new Vector2(6, -3),
            new Vector2(7, -4), new Vector2(7, -3),
            new Vector2(7, -3), new Vector2(7, -2),
            new Vector2(6, -2), new Vector2(6, -1),
            new Vector2(7, -2), new Vector2(7, -1),
            new Vector2(6, 0), new Vector2(7, 0),
            new Vector2(7, -1), new Vector2(7, 0),
            new Vector2(6, 0), new Vector2(7, 0),
            new Vector2(7, 0), new Vector2(7, 1),
            new Vector2(6, 2), new Vector2(7, 2),
            new Vector2(6, 1), new Vector2(6, 2),
            new Vector2(6, 2), new Vector2(7, 2),
            new Vector2(6, 3), new Vector2(7, 3),
            new Vector2(7, 2), new Vector2(7, 3),
            new Vector2(6, 3), new Vector2(7, 3),
            new Vector2(6, 4), new Vector2(6, 5),
            new Vector2(7, 4), new Vector2(7, 5),
            new Vector2(6, 5), new Vector2(6, 6),
            new Vector2(7, 5), new Vector2(7, 6),
            new Vector2(6, 7), new Vector2(7, 7),
            new Vector2(6, 7), new Vector2(7, 7),
            new Vector2(7, 7), new Vector2(7, 8),
            new Vector2(6, 9), new Vector2(7, 9),
            new Vector2(6, 8), new Vector2(6, 9),
            new Vector2(7, -7), new Vector2(8, -7),
            new Vector2(7, -7), new Vector2(7, -6),
            new Vector2(7, -5), new Vector2(8, -5),
            new Vector2(8, -6), new Vector2(8, -5),
            new Vector2(7, -5), new Vector2(8, -5),
            new Vector2(8, -5), new Vector2(8, -4),
            new Vector2(7, -4), new Vector2(7, -3),
            new Vector2(8, -4), new Vector2(8, -3),
            new Vector2(7, -2), new Vector2(8, -2),
            new Vector2(7, -3), new Vector2(7, -2),
            new Vector2(8, -3), new Vector2(8, -2),
            new Vector2(7, -2), new Vector2(8, -2),
            new Vector2(7, -2), new Vector2(7, -1),
            new Vector2(7, -1), new Vector2(7, 0),
            new Vector2(7, 1), new Vector2(8, 1),
            new Vector2(7, 0), new Vector2(7, 1),
            new Vector2(8, 0), new Vector2(8, 1),
            new Vector2(7, 1), new Vector2(8, 1),
            new Vector2(8, 1), new Vector2(8, 2),
            new Vector2(7, 3), new Vector2(8, 3),
            new Vector2(7, 2), new Vector2(7, 3),
            new Vector2(7, 3), new Vector2(8, 3),
            new Vector2(7, 4), new Vector2(8, 4),
            new Vector2(8, 3), new Vector2(8, 4),
            new Vector2(7, 4), new Vector2(8, 4),
            new Vector2(7, 4), new Vector2(7, 5),
            new Vector2(7, 6), new Vector2(8, 6),
            new Vector2(7, 5), new Vector2(7, 6),
            new Vector2(7, 6), new Vector2(8, 6),
            new Vector2(7, 7), new Vector2(8, 7),
            new Vector2(8, 6), new Vector2(8, 7),
            new Vector2(7, 7), new Vector2(8, 7),
            new Vector2(7, 7), new Vector2(7, 8),
            new Vector2(7, 9), new Vector2(8, 9),
            new Vector2(8, -7), new Vector2(9, -7),
            new Vector2(9, -7), new Vector2(9, -6),
            new Vector2(8, -6), new Vector2(8, -5),
            new Vector2(9, -6), new Vector2(9, -5),
            new Vector2(8, -5), new Vector2(8, -4),
            new Vector2(9, -5), new Vector2(9, -4),
            new Vector2(8, -4), new Vector2(8, -3),
            new Vector2(9, -4), new Vector2(9, -3),
            new Vector2(8, -3), new Vector2(8, -2),
            new Vector2(9, -3), new Vector2(9, -2),
            new Vector2(8, -1), new Vector2(9, -1),
            new Vector2(9, -2), new Vector2(9, -1),
            new Vector2(8, -1), new Vector2(9, -1),
            new Vector2(9, -1), new Vector2(9, 0),
            new Vector2(8, 0), new Vector2(8, 1),
            new Vector2(9, 0), new Vector2(9, 1),
            new Vector2(8, 1), new Vector2(8, 2),
            new Vector2(9, 1), new Vector2(9, 2),
            new Vector2(9, 2), new Vector2(9, 3),
            new Vector2(8, 3), new Vector2(8, 4),
            new Vector2(9, 3), new Vector2(9, 4),
            new Vector2(8, 5), new Vector2(9, 5),
            new Vector2(9, 4), new Vector2(9, 5),
            new Vector2(8, 5), new Vector2(9, 5),
            new Vector2(9, 5), new Vector2(9, 6),
            new Vector2(8, 6), new Vector2(8, 7),
            new Vector2(9, 6), new Vector2(9, 7),
            new Vector2(8, 8), new Vector2(9, 8),
            new Vector2(9, 7), new Vector2(9, 8),
            new Vector2(8, 8), new Vector2(9, 8),
            new Vector2(8, 9), new Vector2(9, 9),
            new Vector2(9, 8), new Vector2(9, 9),
    };

    ArrayList<Barrier> barriers = new ArrayList<Barrier>();


    public Maze01_Maze16(Start game) {
        super(game);
        white = new BallInSpace(world, new Vector2(16 / 2.0f + 0.5f -8, 16 / 2.0f + 0.5f-8), 0.2f, Color.WHITE);
        generateWalls();
    }

    private void generateWalls() {
        for (int index = 0; index < walls.length; index += 2) {
            barriers.add(new Barrier(world, walls[index], walls[index+1]));
        }
    }

    @Override
    public void render(float delta) {

        switch (gameState) {

            case INSTRUCTIONS:
                displayLevelName();
                instructions(500);
                break;

            case RUNNING:
                drawTray(delta);
                if (whiteNearEnough()) {
                    finishTimeSeconds = (int) ((System.currentTimeMillis() - startTimeMilliseconds) / 1000);
                    updateHighScore(finishTimeSeconds);
                    gameState = GameState.FINISHED;
                    break;
                }
                draw();
                physics();
                break;

            case FINISHED:
                displayFinalScore(delta);
                draw();
                break;

            case NEXT:
                Utils.nextScreen(this, topLevel);
                break;
        }
    }

    void instructions(int yPos) {
        spriteBatch.begin();
        font.draw(spriteBatch, "Get the white ball to the red dot.", 200, yPos);
        spriteBatch.end();
    }

    void physics() {
        Vector2 g = getG();
        white.move(g);
        world.step(1 / 60f, 6, 2);
    }

    void draw() {

//        perspCam.position.set(0, -H, CAMERA_DISTANCE);
//        perspCam.lookAt(0, 0, 0);
//        perspCam.update();
//
//        Utils.line(worldToPixel(center), worldToPixel(white.box2dBody.getPosition()), Color.DARK_GRAY, 5f);


        Utils.circle(whiteGoalPos, Color.RED, 6f);

        modelBatch.begin(perspCam);
        modelBatch.render(white.modelInstance, environment);
        // debugRenderer.render(world, debugMatrix);
        modelBatch.end();

        for (int index = 0; index < walls.length; index += 2) {
            Utils.worldToPixelLine(walls[index], walls[index+1], Color.BLACK, 3);
        }

        //StdDraw.filledCircle(1.5, 1.5, 0.375);


    }

    boolean whiteNearEnough() {
            float whiteDistanceFromGoal = whiteGoalPos.cpy().sub(white.box2dBody.getPosition()).len();
            return (whiteDistanceFromGoal < 0.2f);
    }


}
